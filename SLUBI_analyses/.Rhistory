View(metadata_bins.2)
library(tidyverse)
library(phyloseq)
library(dada2)
library(ShortRead); packageVersion("ShortRead")
library(Biostrings); packageVersion("Biostrings")
library(diatbarcode)
library(vegan)
?ordinate
?transform_sample_counts
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
browseVignettes("goseq")
library(goseq)
install.packages("ade4")
system("type R")
library(goseq)
library(goseq)
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
library(readr)
library(ggplot2)
library(gplots)
library(pheatmap)
library(sva)
library(plotly)
library(pheatmap)
library(RColorBrewer)
library(DT)
# some useful functions
#
# DataTable is a wonderful package but oh boy,
# saveWidget can't accept relative paths which is like
# having a Ferrari fuelled with diesel
saveWidgetFix <- function (widget, file, title="TE Biogas: report") {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
## Source: https://github.com/ramnathv/htmlwidgets/issues/299#issuecomment-375058928
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir)
saveWidget(widget, file=file, title=title)
}
## Create export directory
dir.create("SLUBI_analyses/export", showWarnings = FALSE)
## Read metadata
metadata.t <- read.table("Metatranscriptome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metatranscriptome")
metadata.g <- read.table("Metagenome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metagenome")
#metadata <- read.table("Metatranscriptome/metadata.tsv", header = TRUE)
metadata <- metadata.t %>% rbind(metadata.g)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin"))
# Export them to file
#write.csv2(metadata_bins, file = "SLUBI_analyses/export/bins_taxonomic_assignment.csv")
metadata_bins %>%
select(-c(n_genomes, n_markers, n_marker_sets, X0, X1, X2, X3, X4, X5)) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
saveWidgetFix(file="SLUBI_analyses/export/bins_taxonomic_assignment.html",
title = "Bins: taxonomic assignment")
# create ghost version with column "user_genome" --> "Bin"
metadata_bins.2 <- metadata_bins %>% rename("Bin" = "user_genome")
# Now we'll try to integrate bin abundance in metagenomic samples.
#
# With ggplot2 `geom_tile`...
#setwd("/home/adm2/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
bin_quantification <- read_tsv("SLUBI_analyses/bin_quantification/Merged_quant.sf")
colnames(bin_quantification) <- c("Bin__contig", "GQ2", "GR2")
metag.quant <- bin_quantification %>%
tidyr::separate(col=Bin__contig, c("Bin", NA), sep = "__", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metat.quant <- read_tsv("Metatranscriptome/Merged_Quant.sf") %>%  # read merged file from salmon (gene expr in TPM)
rename(Gene=Name) %>% # rename "Name" column into "Gene"
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metag.metat.quant <- full_join(metag.quant, metat.quant) %>%
tidyr::gather(key = "Sample", value = "Abundance", 2:ncol(.)) %>%
left_join(metadata) %>%
left_join(metadata_bins.2)
metag.metat.quant$Bin <- as.factor(metag.metat.quant$Bin)
# plot it!
# loveit <- metag.metat.quant %>%
#   ggplot(aes(Sample, Bin)) +
#     geom_tile(aes(fill = Abundance), colour = "white") +
#     scale_fill_gradient(low = "white", high = "steelblue") +
#     facet_grid(Class~Condition, space = "free", scales = "free") +
#      theme(strip.text.y = element_text(angle = 0),
#            axis.text.x = element_text(angle = 90))
# loveit
#Try with pheatmap
metag.metat.quant.pheatmap <- metag.metat.quant %>%
select(Bin, Sample, Abundance) %>%
spread(Sample, Abundance)
rownames(metag.metat.quant.pheatmap) <- metag.metat.quant.pheatmap$Bin
metag.metat.quant.pheatmap <- select(metag.metat.quant.pheatmap, -Bin) %>%
as.matrix()
metadata.anno.col <- select(metadata, -c(Sample, Replicate))
rownames(metadata.anno.col) <- metadata$Sample
## ABSOLUTE WITCHCRAFT THIS MODIFIES metadata_bins, metadata_bins.2
# metadata.bins.3 <- cbind(metadata_bins.2)
# metadata.anno.row <- select(metadata.bins.3, c(Class, Contamination, Completeness, Genus))
# rownames(metadata.anno.row) <- metadata.bins.3$Bin
# #metadata.anno.row <- metadata.anno.row %>% data.table::setorder(Class)
# metadata.anno.row <- data.table::setorder(metadata.anno.row, Class)
##
#########
metadata.anno.row <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin")) %>%
select(c(user_genome, Class, Contamination, Completeness, Genus)) %>%
data.table::setorder(Class)
rownames(metadata.anno.row) <- metadata.anno.row$user_genome
metadata.anno.row <- select(metadata.anno.row, -user_genome)
##########
#metadata.anno.row <- metadata.anno.row[order("Class"),]
metag.metat.quant.pheatmap.ordered <- metag.metat.quant.pheatmap[rownames(metadata.anno.row),]
metag.metat.quant.pheatmap
rownames(metadata.anno.row)
metadata.anno.row
len(rownames(metadata.anno.row))
length(rownames(metadata.anno.row))
length(metag.metat.quant.pheatmap)
nrow(metag.metat.quant.pheatmap)
getwd()
list.files
list.files()
setwd("..")
list.files()
# some useful functions
#
# DataTable is a wonderful package but oh boy,
# saveWidget can't accept relative paths which is like
# having a Ferrari fuelled with diesel
saveWidgetFix <- function (widget, file, title="TE Biogas: report") {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
## Source: https://github.com/ramnathv/htmlwidgets/issues/299#issuecomment-375058928
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir)
saveWidget(widget, file=file, title=title)
}
## Create export directory
dir.create("SLUBI_analyses/export", showWarnings = FALSE)
## Read metadata
metadata.t <- read.table("Metatranscriptome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metatranscriptome")
metadata.g <- read.table("Metagenome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metagenome")
#metadata <- read.table("Metatranscriptome/metadata.tsv", header = TRUE)
metadata <- metadata.t %>% rbind(metadata.g)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin"))
# Export them to file
#write.csv2(metadata_bins, file = "SLUBI_analyses/export/bins_taxonomic_assignment.csv")
metadata_bins %>%
select(-c(n_genomes, n_markers, n_marker_sets, X0, X1, X2, X3, X4, X5)) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
saveWidgetFix(file="SLUBI_analyses/export/bins_taxonomic_assignment.html",
title = "Bins: taxonomic assignment")
# create ghost version with column "user_genome" --> "Bin"
metadata_bins.2 <- metadata_bins %>% rename("Bin" = "user_genome")
# Now we'll try to integrate bin abundance in metagenomic samples.
#
# With ggplot2 `geom_tile`...
#setwd("/home/adm2/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
bin_quantification <- read_tsv("SLUBI_analyses/bin_quantification/Merged_quant.sf")
colnames(bin_quantification) <- c("Bin__contig", "GQ2", "GR2")
metag.quant <- bin_quantification %>%
tidyr::separate(col=Bin__contig, c("Bin", NA), sep = "__", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metat.quant <- read_tsv("Metatranscriptome/Merged_Quant.sf") %>%  # read merged file from salmon (gene expr in TPM)
rename(Gene=Name) %>% # rename "Name" column into "Gene"
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metag.metat.quant <- full_join(metag.quant, metat.quant) %>%
tidyr::gather(key = "Sample", value = "Abundance", 2:ncol(.)) %>%
left_join(metadata) %>%
left_join(metadata_bins.2)
metag.metat.quant$Bin <- as.factor(metag.metat.quant$Bin)
# plot it!
# loveit <- metag.metat.quant %>%
#   ggplot(aes(Sample, Bin)) +
#     geom_tile(aes(fill = Abundance), colour = "white") +
#     scale_fill_gradient(low = "white", high = "steelblue") +
#     facet_grid(Class~Condition, space = "free", scales = "free") +
#      theme(strip.text.y = element_text(angle = 0),
#            axis.text.x = element_text(angle = 90))
# loveit
#Try with pheatmap
metag.metat.quant.pheatmap <- metag.metat.quant %>%
select(Bin, Sample, Abundance) %>%
spread(Sample, Abundance)
rownames(metag.metat.quant.pheatmap) <- metag.metat.quant.pheatmap$Bin
metag.metat.quant.pheatmap <- select(metag.metat.quant.pheatmap, -Bin) %>%
as.matrix()
metadata.anno.col <- select(metadata, -c(Sample, Replicate))
rownames(metadata.anno.col) <- metadata$Sample
## ABSOLUTE WITCHCRAFT THIS MODIFIES metadata_bins, metadata_bins.2
# metadata.bins.3 <- cbind(metadata_bins.2)
# metadata.anno.row <- select(metadata.bins.3, c(Class, Contamination, Completeness, Genus))
# rownames(metadata.anno.row) <- metadata.bins.3$Bin
# #metadata.anno.row <- metadata.anno.row %>% data.table::setorder(Class)
# metadata.anno.row <- data.table::setorder(metadata.anno.row, Class)
##
#########
metadata.anno.row <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin")) %>%
select(c(user_genome, Class, Contamination, Completeness, Genus)) %>%
data.table::setorder(Class)
rownames(metadata.anno.row) <- metadata.anno.row$user_genome
metadata.anno.row <- select(metadata.anno.row, -user_genome)
##########
#metadata.anno.row <- metadata.anno.row[order("Class"),]
metag.metat.quant.pheatmap.ordered <- metag.metat.quant.pheatmap[rownames(metadata.anno.row),]
sessionInfo()
sessionInfo()
sessionInfo()
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
library(readr)
library(ggplot2)
library(gplots)
library(pheatmap)
library(sva)
library(plotly)
library(pheatmap)
library(RColorBrewer)
library(DT)
# some useful functions
#
# DataTable is a wonderful package but oh boy,
# saveWidget can't accept relative paths which is like
# having a Ferrari fuelled with diesel
saveWidgetFix <- function (widget, file, title="TE Biogas: report") {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
## Source: https://github.com/ramnathv/htmlwidgets/issues/299#issuecomment-375058928
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir)
saveWidget(widget, file=file, title=title)
}
## Create export directory
dir.create("SLUBI_analyses/export", showWarnings = FALSE)
## Read metadata
metadata.t <- read.table("Metatranscriptome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metatranscriptome")
metadata.g <- read.table("Metagenome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metagenome")
#metadata <- read.table("Metatranscriptome/metadata.tsv", header = TRUE)
metadata <- metadata.t %>% rbind(metadata.g)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin"))
# Export them to file
#write.csv2(metadata_bins, file = "SLUBI_analyses/export/bins_taxonomic_assignment.csv")
metadata_bins %>%
select(-c(n_genomes, n_markers, n_marker_sets, X0, X1, X2, X3, X4, X5)) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
saveWidgetFix(file="SLUBI_analyses/export/bins_taxonomic_assignment.html",
title = "Bins: taxonomic assignment")
# create ghost version with column "user_genome" --> "Bin"
metadata_bins.2 <- metadata_bins %>% rename("Bin" = "user_genome")
# Now we'll try to integrate bin abundance in metagenomic samples.
#
# With ggplot2 `geom_tile`...
#setwd("/home/adm2/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
bin_quantification <- read_tsv("SLUBI_analyses/bin_quantification/Merged_quant.sf")
colnames(bin_quantification) <- c("Bin__contig", "GQ2", "GR2")
metag.quant <- bin_quantification %>%
tidyr::separate(col=Bin__contig, c("Bin", NA), sep = "__", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metat.quant <- read_tsv("Metatranscriptome/Merged_Quant.sf") %>%  # read merged file from salmon (gene expr in TPM)
rename(Gene=Name) %>% # rename "Name" column into "Gene"
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metag.metat.quant <- full_join(metag.quant, metat.quant) %>%
tidyr::gather(key = "Sample", value = "Abundance", 2:ncol(.)) %>%
left_join(metadata) %>%
left_join(metadata_bins.2)
metag.metat.quant$Bin <- as.factor(metag.metat.quant$Bin)
# plot it!
# loveit <- metag.metat.quant %>%
#   ggplot(aes(Sample, Bin)) +
#     geom_tile(aes(fill = Abundance), colour = "white") +
#     scale_fill_gradient(low = "white", high = "steelblue") +
#     facet_grid(Class~Condition, space = "free", scales = "free") +
#      theme(strip.text.y = element_text(angle = 0),
#            axis.text.x = element_text(angle = 90))
# loveit
#Try with pheatmap
metag.metat.quant.pheatmap <- metag.metat.quant %>%
select(Bin, Sample, Abundance) %>%
spread(Sample, Abundance)
rownames(metag.metat.quant.pheatmap) <- metag.metat.quant.pheatmap$Bin
metag.metat.quant.pheatmap <- select(metag.metat.quant.pheatmap, -Bin) %>%
as.matrix()
metadata.anno.col <- select(metadata, -c(Sample, Replicate))
rownames(metadata.anno.col) <- metadata$Sample
## ABSOLUTE WITCHCRAFT THIS MODIFIES metadata_bins, metadata_bins.2
# metadata.bins.3 <- cbind(metadata_bins.2)
# metadata.anno.row <- select(metadata.bins.3, c(Class, Contamination, Completeness, Genus))
# rownames(metadata.anno.row) <- metadata.bins.3$Bin
# #metadata.anno.row <- metadata.anno.row %>% data.table::setorder(Class)
# metadata.anno.row <- data.table::setorder(metadata.anno.row, Class)
##
#########
metadata.anno.row <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin")) %>%
select(c(user_genome, Class, Contamination, Completeness, Genus)) %>%
data.table::setorder(Class)
rownames(metadata.anno.row) <- metadata.anno.row$user_genome
metadata.anno.row <- select(metadata.anno.row, -user_genome)
##########
#metadata.anno.row <- metadata.anno.row[order("Class"),]
metag.metat.quant.pheatmap.ordered <- metag.metat.quant.pheatmap[rownames(metadata.anno.row),]
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
library("dplyr")
sessionInfo()
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
library(readr)
library(ggplot2)
library(gplots)
library(pheatmap)
library(sva)
library(plotly)
library(pheatmap)
library(RColorBrewer)
library(DT)
metadata.anno.row <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin")) %>%
select(c(user_genome, Class, Contamination, Completeness, Genus)) %>%
data.table::setorder(Class)
rownames(metadata.anno.row) <- metadata.anno.row$user_genome
metadata.anno.row <- select(metadata.anno.row, -user_genome)
View(metadata.anno.row)
length(metadata.anno.row)
length(rownames(metadata.anno.row))
length(metag.metat.quant.pheatmap)
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
library(readr)
library(ggplot2)
library(gplots)
library(pheatmap)
library(sva)
library(plotly)
library(pheatmap)
library(RColorBrewer)
library(DT)
# some useful functions
#
# DataTable is a wonderful package but oh boy,
# saveWidget can't accept relative paths which is like
# having a Ferrari fuelled with diesel
saveWidgetFix <- function (widget, file, title="TE Biogas: report") {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
## Source: https://github.com/ramnathv/htmlwidgets/issues/299#issuecomment-375058928
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir)
saveWidget(widget, file=file, title=title)
}
## Create export directory
dir.create("SLUBI_analyses/export", showWarnings = FALSE)
## Read metadata
metadata.t <- read.table("Metatranscriptome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metatranscriptome")
metadata.g <- read.table("Metagenome/metadata.tsv", header = TRUE) %>%
mutate(Sample_type="metagenome")
#metadata <- read.table("Metatranscriptome/metadata.tsv", header = TRUE)
metadata <- metadata.t %>% rbind(metadata.g)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE) %>%
left_join(read.table("SLUBI_analyses/bins_taxonomy_wf/all_summary.tab", header=TRUE, sep="\t"), by = c("user_genome" = "Bin"))
# Export them to file
#write.csv2(metadata_bins, file = "SLUBI_analyses/export/bins_taxonomic_assignment.csv")
metadata_bins %>%
select(-c(n_genomes, n_markers, n_marker_sets, X0, X1, X2, X3, X4, X5)) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
saveWidgetFix(file="SLUBI_analyses/export/bins_taxonomic_assignment.html",
title = "Bins: taxonomic assignment")
# create ghost version with column "user_genome" --> "Bin"
metadata_bins.2 <- metadata_bins %>% rename("Bin" = "user_genome")
# Now we'll try to integrate bin abundance in metagenomic samples.
#
# With ggplot2 `geom_tile`...
#setwd("/home/adm2/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
bin_quantification <- read_tsv("SLUBI_analyses/bin_quantification/Merged_quant.sf")
colnames(bin_quantification) <- c("Bin__contig", "GQ2", "GR2")
metag.quant <- bin_quantification %>%
tidyr::separate(col=Bin__contig, c("Bin", NA), sep = "__", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metat.quant <- read_tsv("Metatranscriptome/Merged_Quant.sf") %>%  # read merged file from salmon (gene expr in TPM)
rename(Gene=Name) %>% # rename "Name" column into "Gene"
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
metag.metat.quant <- full_join(metag.quant, metat.quant) %>%
tidyr::gather(key = "Sample", value = "Abundance", 2:ncol(.)) %>%
left_join(metadata) %>%
left_join(metadata_bins.2)
metag.metat.quant$Bin <- as.factor(metag.metat.quant$Bin)
# plot it!
# loveit <- metag.metat.quant %>%
#   ggplot(aes(Sample, Bin)) +
#     geom_tile(aes(fill = Abundance), colour = "white") +
#     scale_fill_gradient(low = "white", high = "steelblue") +
#     facet_grid(Class~Condition, space = "free", scales = "free") +
#      theme(strip.text.y = element_text(angle = 0),
#            axis.text.x = element_text(angle = 90))
# loveit
metag.metat.quant.pheatmap <- metag.metat.quant %>%
select(Bin, Sample, Abundance) %>%
spread(Sample, Abundance)
rownames(metag.metat.quant.pheatmap) <- metag.metat.quant.pheatmap$Bin
metag.metat.quant.pheatmap <- select(metag.metat.quant.pheatmap, -Bin) %>%
as.matrix()
length(metag.metat.quant.pheatmap)
length(nrow(metag.metat.quant.pheatmap))
length(rownames(metag.metat.quant.pheatmap))
rownames(metadata.anno.row)
metag.metat.quant.pheatmap
metag.metat.quant.pheatmap[1,]
nrow(metag.metat.quant.pheatmap)
metag.metat.quant.pheatmap <- metag.metat.quant %>%
select(Bin, Sample, Abundance) %>%
spread(Sample, Abundance)
nrow(metag.metat.quant.pheatmap)
metag.metat.quant.pheatmap

res <- results(dds.deseq)
res
mcols(res, use.names = TRUE)
# > mcols(res, use.names = TRUE)
# DataFrame with 6 rows and 2 columns
#                        type                                         description
#                 <character>                                         <character>
# baseMean       intermediate           mean of normalized counts for all samples
# log2FoldChange      results log2 fold change (MLE): Condition treatment vs ctrl
# lfcSE               results         standard error: Condition treatment vs ctrl
# stat                results         Wald statistic: Condition treatment vs ctrl
# pvalue              results      Wald test p-value: Condition treatment vs ctrl
# padj                results                                BH adjusted p-values
summary(res)
res.05 <- results(dds.deseq, alpha = 0.05)
table(res.05$padj < 0.05)
resLFC1 <- results(dds.deseq, lfcThreshold=1)
table(resLFC1$padj < 0.1)
resLFC1 <- results(dds.deseq, lfcThreshold=2)
table(resLFC1$padj < 0.1)
resLFC1 <- results(dds.deseq, lfcThreshold=1)
table(resLFC1$padj < 0.1)
table(resLFC1$padj < 0.1)[FALSE]
table(resLFC1$padj < 0.1)["FALSE"]
resLFC1 <- results(dds.deseq, lfcThreshold=3)
table(resLFC1$padj < 0.1)
resLFC1 <- results(dds.deseq, lfcThreshold=-3)
resLFC1 <- results(dds.deseq, lfcThreshold=5)
table(resLFC1$padj < 0.1)
subset(res, padj < 0.1)
subset(res, padj < 0.1) %>%
datatable()
subset(res, padj < 0.1) %>%
as.data.frame() %>% head()
subset(res, padj < 0.1) %>%
as.data.frame() %>%
datatable()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
datatable()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>% head()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>% head()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable() %>% saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top") %>% saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top") %>% saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>% saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle(min(.$log2foldChange):max(.$log2foldChange),
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle(log2foldChange,
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle(log2FoldChange,
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle('log2FoldChange',
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html")
?saveWidget
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle('log2FoldChange',
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html", title="TE Biogas: differential gene expression analysis")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle('log2FoldChange',
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html", title="TE Biogas: differential gene expression analysis")
# some useful functions
#
# DataTable is a wonderful package but oh boy,
# saveWidget can't accept relative paths which is like
# having a Ferrari fuelled with diesel
saveWidgetFix <- function (widget, file, title="BWE") {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
## Source: https://github.com/ramnathv/htmlwidgets/issues/299#issuecomment-375058928
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir)
saveWidget(widget, file=file, title=title)
}
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
select(Bin, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle('log2FoldChange',
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html", title="TE Biogas: differential gene expression analysis")
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t")
View(metadata_bins)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t"))
knitr::opts_knit$set(root.dir = "~/Dropbox/Research/slu/SLUBI_support/SLUBI_Project_TE_Biogas_snic2019-30-23")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, message = FALSE, warning = FALSE, echo=FALSE)
library(DESeq2)
library(tximport)
#library(GenomicFeatures)
library(tidyverse)
library(readr)
library(ggplot2)
library(gplots)
library(pheatmap)
library(sva)
library(plotly)
library(pheatmap)
library(RColorBrewer)
library(DT)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t"))
View(M1)
M1 <- read_tsv("Metatranscriptome/Merged_Quant.sf") %>%  # read merged file from salmon (gene expr in TPM)
rename(Gene=Name) %>% # rename "Name" column into "Gene"
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
#Bins <- M1$Bin
dplyr::select(metadata_bins, user_genome, classification)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification)
View(metadata_bins)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
dplyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE)
# Read bins' metadata
metadata_bins <- read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.bac120.summary.tsv", header = TRUE, sep = "\t") %>%
rbind(read.table("SLUBI_analyses/Bins_taxonomy_assignment/gtdbtk.ar122.summary.tsv", header = TRUE, sep = "\t")) %>%
dplyr::select(user_genome, classification) %>%
tidyr::separate(classification, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", remove = TRUE)
?left_join
M1$Bin %>% left_join(metadata_bins, by=c(Bin, user_genome))
#Bins <- M1$Bin
as.data.frame(M1$Bin) %>% left_join(metadata_bins, by=c(Bin, user_genome))
#Bins <- M1$Bin
as.data.frame(Bin=M1$Bin) %>% left_join(metadata_bins, by=c(Bin, user_genome))
#Bins <- M1$Bin
data.frame(Bin=M1$Bin) %>% left_join(metadata_bins, by=c(Bin, user_genome))
?data.frame
data.frame(Bin=M1$Bin)
#Bins <- M1$Bin
data.frame(Bin=M1$Bin) %>% left_join(metadata_bins, by=c(Bin = user_genome))
#Bins <- M1$Bin
data.frame(Bin=M1$Bin) %>% left_join(metadata_bins, by=c(Bin = user.genome))
#Bins <- M1$Bin
data.frame(Bin=M1$Bin) %>% left_join(metadata_bins, by=c("Bin" = "user_genome"))
?select
#Bins <- M1$Bin
data.frame(Bin=M1$Bin) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
select(Bin, Class, Genus)
#Bins <- M1$Bin
Bins <- data.frame(Bin=M1$Bin) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
select(Bin, Class, Genus)
M1 <- select(M1, -Bin) %>% as.matrix()
x <- list(
title = "Sample"
#  titlefont = f
)
y <- list(
title = "Bin"
#  titlefont = f
)
fig <- plot_ly(
x = colnames(M1), y = Bins,
z = M1, type = "heatmap"
) %>% layout(xaxis = x, yaxis = y)
fig
?paste
#Bins <- M1$Bin
Bins <- data.frame(Bin=M1$Bin) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
select(Bin, Class, Genus) %>%
transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
pull(Bins)
M1 <- read_tsv("Metatranscriptome/Merged_Quant.sf") %>%  # read merged file from salmon (gene expr in TPM)
rename(Gene=Name) %>% # rename "Name" column into "Gene"
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = TRUE) %>% # add column with bin name (from gene name)
group_by(Bin) %>% summarise_all(funs(sum)) %>% ungroup()
#Bins <- M1$Bin
Bins <- data.frame(Bin=M1$Bin) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
select(Bin, Class, Genus) %>%
transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
pull(Bins)
M1 <- select(M1, -Bin) %>% as.matrix()
x <- list(
title = "Sample"
#  titlefont = f
)
y <- list(
title = "Bin"
#  titlefont = f
)
fig <- plot_ly(
x = colnames(M1), y = Bins,
z = M1, type = "heatmap"
) %>% layout(xaxis = x, yaxis = y)
fig
View(anno)
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>% head()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>% head()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>% head()
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle('log2FoldChange',
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html", title="TE Biogas: differential gene expression analysis")
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
datatable(filter = "top", options = list(autoWidth=TRUE)) %>%
# formatStyle(1:length(df[1,]),
#                   backgroundColor = styleInterval(mean(as.numeric(df[1,])), c("red","green")))
formatStyle('log2FoldChange',
backgroundColor = styleInterval(0, c("red","green"))) %>%
#    formatStyle('log2foldChange', )
saveWidgetFix(file="SLUBI_analyses/export/DGE_results.html", title="TE Biogas: differential gene expression analysis")
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>%
summarize(total_DE_genes = n(),
overexpressed_genes = n(log2FoldChange > 0),
underexpressed_genes = n(log2FoldChange < 0)) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% head()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = n(log2FoldChange > 0),
underexpressed_genes = n(log2FoldChange < 0)) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = n(.$log2FoldChange > 0),
underexpressed_genes = n(.$log2FoldChange < 0)) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% #head()
summarize(total_DE_genes = n())
?n()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = count(log2FoldChange > 0),
underexpressed_genes = count(log2FoldChange < 0)) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = sum(value[log2FoldChange > 0]),
underexpressed_genes = sum(value[log2FoldChange > 0])) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = length(log2FoldChange[log2FoldChange > 0]),
underexpressed_genes = length(log2FoldChange[log2FoldChange > 0])) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = length(log2FoldChange[log2FoldChange > 0]),
underexpressed_genes = length(log2FoldChange[log2FoldChange < 0])) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin, Class, Genus) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = length(log2FoldChange[log2FoldChange > 0]),
underexpressed_genes = length(log2FoldChange[log2FoldChange < 0])) %>%
ungroup()
subset(res, padj < 0.05) %>%
as.data.frame() %>%
round(digits = 2) %>%
mutate(Gene=rownames(.)) %>%
separate(col=Gene, c("Bin", NA), sep = "_[01]", remove = FALSE) %>%
left_join(metadata_bins, by=c("Bin" = "user_genome")) %>%
#select(Bin, Class, Genus) %>%
#    transmute(Bins = paste(Bin, Class, Genus, sep = ";")) %>%
select(Bin, Class, Genus, Gene, 1:6) %>%
group_by(Bin, Class, Genus) %>% #head()
summarize(total_DE_genes = n(),
overexpressed_genes = length(log2FoldChange[log2FoldChange > 0]),
underexpressed_genes = length(log2FoldChange[log2FoldChange < 0])) %>%
ungroup() %>%
datatable(filter = "top", options = list(autoWidth=TRUE))
